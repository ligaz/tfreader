name: main
on: [push, pull_request]

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: "graalvm-community"
          version: "latest"
          java-version: "21"
          components: "native-image"
          cache: "sbt"
      - run: sbt scalafmtCheckAll scalafmtSbtCheck
  build:
    name: Build
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: "graalvm-community"
          version: "latest"
          java-version: "21"
          components: "native-image"
          cache: "sbt"
      - run: sbt test graalvm-native-image:packageBin
      - uses: actions/upload-artifact@v4
        with:
          name: tfr-${{ runner.os }}
          path: modules/cli/target/graalvm-native-image/tfr
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, checks]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt
  publish:
    name: Publish
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    needs: [release]
    steps:
      - id: get_version
        run: |
          echo ${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      - uses: actions/download-artifact@v4
        with:
          name: release_url
      - id: get_release_info
        run: |
          value=`cat release_url.txt`
          echo ::set-output name=upload_url::$value
      - uses: actions/download-artifact@v4
        with:
          name: tfr-${{ runner.os }}
      - id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: tfr-${{ runner.os }}.tar.gz
          asset_name: tfr-${{ steps.get_version.outputs.version }}-${{ runner.os }}.tar.gz
          asset_content_type: application/gzip
